% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParamSet.R
\docType{data}
\name{ParamSet}
\alias{ParamSet}
\title{ParamSet}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
ParamSet
}
\description{
A set of \link{Param} objects.
}
\section{Public members / active bindings}{

\itemize{
\item \code{id}               :: \code{character(1)}
ID of this param set. Settable.
\item \code{params}           :: named list of \link{Param}
Contained parameters, named with their respective IDs.
NB: The returned list contains references, so you can potentially change the objects of the param set by writing to them.
\item \code{length}           :: \code{integer(1)}
Number of contained params. Read-only.
\item \code{is_empty}         :: \code{logical(1)}
Is the param set empty? Read-only.
\item \code{ids}              :: \code{character}
IDs of contained parameters. Read-only.
\item \code{pclasses}         :: named \code{character}
Param classes of contained parameters.
Named with param IDs. Read-only.
\item \code{lowers}           :: named \link{double}
Lower bounds of parameters, NA if param is not a number.
Named with param IDs. Read-only.
\item \code{uppers}           :: named \link{double}
Upper bounds of parameters, NA if param is not a number.
Named with param IDs. Read-only.
\item \code{values}           :: named \code{list}
List of character vectors of allowed categorical values of contained parameters, NULL if param is not categorical.
Named with param IDs. Read-only.
\item \code{nlevels}          :: named \link{double}
Number of categorical levels per parameter, Inf for unbounded ints or any dbl.
Named with param IDs. Read-only.
\item \code{is_bounded}       :: named \code{logical(1)}
Do all parameters have finite bounds?
Named with param IDs. Read-only.
\item \code{special_vals}     :: named \code{list} of \code{list} \cr
Special values for all parameters.
Named with param IDs. Read-only.
\item \code{storage_types}     :: \code{character} \cr
Data types of params when stored in tables.
Named with param IDs. Read-only.
\item \code{tags}              :: named \code{list} of \code{character} \cr
Can be used to group and subset params.
Named with param IDs. Read-only.
\item \code{defaults}          :: named \code{list} \cr
Default values of all params. If no default exists, element is not present.
Named with param IDs. Read-only.
\item \code{trafo}            :: \code{function(x, param_set)} -> named \code{list} \cr
Transformation function. Settable.
The function is responsible to transform a single (feasible) configuration list into
another encoding, before evaluating the configuration with the target algorithm.
For the output-list, not many things have to hold.
It needs to be a uniquely-named list, and the target algorithm has to accept the configuarion.
NB: For convenience, the self-paramset is also passed, if you need some info from it.
}
}

\section{Public methods}{

\itemize{
\item \code{new(params)} \cr
list of \link{Param} -> \code{self}
Deep-clones all passed param objects.
\item \code{add(param_set)} \cr
\link{Param} | \link{ParamSet} -> \code{self}
Adds a single param or another set to this set, all params are cloned.
\item \code{subset(ids)} \cr
\code{character} -> \code{self}
Changes the current set to the set of passed IDs.
\item \code{transform(x)} \cr
\link{data.table} -> \link{data.table}
Transforms a collection of configurations (rows) via the associated \code{trafo} of the param set,
so each row in the returned data.table corresponds to the origin-row with the same row-index.
\item \code{test(x)}, \code{check(x)}, \code{assert(x)} \cr
Three checkmate-like check-functions. Take a named list.
A point x is feasible, if it configures a subset of params,
all individual param constraints are satisfied and all dependencies are satisfied.
\item \code{add_dependency(dep)} \cr
\link{Dependency} -> \code{self}
}
}

\section{S3 methods and type converters}{

\itemize{
\item \code{as.data.table()} \cr
Compact representation as datatable. Col types are: \cr
\itemize{
\item id: character
\item lower, upper: double
\item values: list col, with NULL elements
\item special_vals: list col of list
\item is_bounded: logical
\item default: list col, with NULL elements
\item storage_type: character
\item tags: list col of character vectors
}
}
}

\keyword{datasets}
