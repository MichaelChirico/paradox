% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Param.R
\docType{data}
\name{Param}
\alias{Param}
\title{Param Object}
\format{\link{R6Class} object.}
\usage{
Param
}
\description{
Abstract base class for params.
}
\section{Public members / active bindings}{

\itemize{
\item \code{id}               :: \code{character(1)} \cr
ID of this param.
\item \code{pclass}           :: \code{character(1)} \cr
Param R6 class name. Read-only.
\item \code{lower}            :: \code{numeric(1)} \cr
Lower bound for dbl/int params, can be -Inf. NA if param is not a number.
\item \code{upper}            :: \code{numeric(1)} \cr
Upper bound for dbl/int params, can be +Inf. NA if param is not a number.
\item \code{values}           :: \code{character} | \code{logical} | \code{NULL} \cr
Allowed values for categorical params, NULL if param is not categorical.
\item \code{nlevels}          :: \code{numeric(1)} \cr
Number of categorical levels per parameter, Inf for unbounded ints or any dbl. Read-only.
\item \code{is_bounded}       :: \code{logical(1)} \cr
Does param have a finitely bounded domain? Read-only.
\item \code{special_vals}     :: \code{list} \cr
Arbitrary special values this parameter is allowed to take, to make it feasible.
This allows extending the domain of the param.
This is only used in feasibility checks, neither in generating designs nor sampling.
\item \code{default}          :: \code{any} \cr
Default value. Can be from param domain or \code{special_vals}.
Has value \code{NO_DEF} if no default is there - \code{NULL} could be a valid default.
\item \code{storage_type}     :: \code{character(1)} \cr
Data type when values of this param is stored in a data table or sampled. Read-only.
\item \code{tags}             :: \code{character} \cr
Can be used to group and subset params.
}
}

\section{Public methods}{

\itemize{
\item \code{new(id, special_vals, default, tags)} \cr
\code{character(1)}, \code{list}, \code{any}, \code{character} -> self \cr
Constructor of abstract base class, only called by inheriting classes.
\item \code{test(x)}, \code{check(x)}, \code{assert(x)} \cr
Three checkmate-like check-functions. Take a value from the domain of the param, and check if it is feasible.
A value is feasible if it is of the same \code{storage_type}, inside of the bounds or from \code{special_vals}.
\item \code{qunif(x)} \cr
\code{numeric(n)} -> \code{vector(n)} \cr
Takes values from [0,1] and map them, regularly distributed, to the domain of the param.
Think of: quantile function or the usecse to map a uniform-[0,1] random variable into a uniform sample from this param.
\item \code{rep(n)} \cr
\code{integer(1)} -> \link{ParamSet} \cr
Repeats this param n-times (by cloning); each param is named "<id>\emph{rep}<k>" and gets additional tag "<id>_rep".
}
}

\section{S3 methods and type converters}{

\itemize{
\item \code{as.data.table()} \cr
Converts param to datatable with 1 row. See \link{ParamSet}.
}
}

\seealso{
Other Param: \code{\link{ParamDbl}},
  \code{\link{ParamFact}}, \code{\link{ParamInt}},
  \code{\link{ParamLgl}}, \code{\link{ParamUty}}
}
\concept{Param}
\keyword{datasets}
